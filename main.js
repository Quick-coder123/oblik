// –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ —Å–∞–π—Ç—É –∑ Supabase
const DATA_KEY = 'oblik_clients'; // –ó–∞–ª–∏—à–∞—î–º–æ –¥–ª—è fallback

// –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞—Ç–∞–º–∏
function formatDateToDDMMYYYY(date) {
  const d = new Date(date);
  const day = String(d.getDate()).padStart(2, '0');
  const month = String(d.getMonth() + 1).padStart(2, '0');
  const year = d.getFullYear();
  return `${day}/${month}/${year}`;
}

function formatDateToYYYYMMDD(dateStr) {
  if (!dateStr || dateStr === '') return '';
  const parts = dateStr.split('/');
  if (parts.length === 3 && parts[0] && parts[1] && parts[2]) {
    return `${parts[2]}-${parts[1].padStart(2, '0')}-${parts[0].padStart(2, '0')}`;
  }
  return '';
}

function formatDateFromYYYYMMDD(dateStr) {
  if (!dateStr || dateStr === '') return '';
  const parts = dateStr.split('-');
  if (parts.length === 3 && parts[0] && parts[1] && parts[2]) {
    return `${parts[2]}/${parts[1]}/${parts[0]}`;
  }
  return '';
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Supabase –∞–±–æ fallback
async function fetchData() {
  try {
    // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ Supabase
    const supabaseClients = await SupabaseAPI.getAllClients();
    
    if (supabaseClients.length > 0) {
      // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –¥–∞–Ω—ñ –∑ Supabase —É —Ñ–æ—Ä–º–∞—Ç –¥–æ–¥–∞—Ç–∫—É
      return supabaseClients.map(convertSupabaseToApp);
    }
    
    // Fallback: –ø—Ä–æ–±—É—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑ data.json
    const res = await fetch('data.json');
    const serverData = await res.json();
    
    // –¢–∞–∫–æ–∂ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
    const localData = JSON.parse(localStorage.getItem(DATA_KEY) || '[]');
    
    const allData = [...serverData];
    localData.forEach(local => {
      if (!allData.find(server => server.inn === local.inn)) {
        allData.push(local);
      }
    });
    
    return allData;
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:', error);
    // –û—Å—Ç–∞–Ω–Ω—ñ–π fallback - —Ç—ñ–ª—å–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
    return JSON.parse(localStorage.getItem(DATA_KEY) || '[]');
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö (Supabase + localStorage —è–∫ fallback)
async function saveData(clients) {
  // –ó–∞–≤–∂–¥–∏ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ localStorage —è–∫ fallback
  localStorage.setItem(DATA_KEY, JSON.stringify(clients));
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∞–∫—Ç–∏–≤–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤ (–Ω–µ –∞—Ä—Ö—ñ–≤–Ω–∏—Ö)
function filterActiveClients(clients) {
  return clients.filter(client => {
    // –ö–ª—ñ—î–Ω—Ç –ù–ï –∞—Ä—Ö—ñ–≤–Ω–∏–π, —è–∫—â–æ –Ω–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è —Ö–æ—á–∞ –± –æ–¥–Ω–∞ —É–º–æ–≤–∞:
    // 1. –ù–µ–º–∞—î –¥–∞—Ç–∏ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó
    // 2. –°—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç–∏ –Ω–µ "–í–∏–¥–∞–Ω–∞"
    // 3. –ù–µ –≤—Å—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∏ –Ω–∞—è–≤–Ω—ñ
    return !(client.activationDate && 
             client.cardStatus === '–í–∏–¥–∞–Ω–∞' && 
             client.passport && 
             client.survey && 
             client.contract);
  });
}

function renderClients(clients) {
  let html = '<table><thead><tr>' +
    '<th>–ü–Ü–ë</th><th>–Ü–ü–ù</th><th>–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è</th><th>–î–∞—Ç–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è</th><th>–î–∞—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó</th><th>–°—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç–∏</th><th>–î–æ–∫—É–º–µ–Ω—Ç–∏</th><th>–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ</th><th>–î—ñ—ó</th></tr></thead><tbody>';
  for (let i = 0; i < clients.length; i++) {
    const c = clients[i];
    const passportIcon = c.passport ? '<span class="icon-check">‚úì</span>' : '<span class="icon-cross">‚úó</span>';
    const surveyIcon = c.survey ? '<span class="icon-check">‚úì</span>' : '<span class="icon-cross">‚úó</span>';
    const contractIcon = c.contract ? '<span class="icon-check">‚úì</span>' : '<span class="icon-cross">‚úó</span>';
    
    // –°—Ç–∞—Ç—É—Å –∫–∞—Ä—Ç–∏ –∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º –∫–æ–¥—É–≤–∞–Ω–Ω—è–º
    const cardStatus = c.cardStatus || '–ù–∞ –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ñ';
    let statusClass = '';
    switch(cardStatus) {
      case '–ù–∞ –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ñ': statusClass = 'status-manufacturing'; break;
      case '–ù–∞ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—ñ': statusClass = 'status-branch'; break;
      case '–ù–∞ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó': statusClass = 'status-organization'; break;
      case '–í–∏–¥–∞–Ω–∞': statusClass = 'status-issued'; break;
    }
    
    html += `<tr>
      <td>${c.name}</td>
      <td>${c.inn}</td>
      <td>${c.org}</td>
      <td>${c.openDate}</td>
      <td>${c.activationDate || ''}</td>
      <td><span class="card-status ${statusClass}">${cardStatus}</span></td>
      <td class="documents-cell">
        <div>–ü–∞—Å–ø–æ—Ä—Ç: ${passportIcon}</div>
        <div>–û–ø–∏—Ç—É–≤–∞–ª—å–Ω–∏–∫: ${surveyIcon}</div>
        <div>–î–æ–≥–æ–≤—ñ—Ä: ${contractIcon}</div>
      </td>
      <td>${c.comments||''}</td>
      <td><button onclick="editClient(${i})" class="edit-btn" title="–†–µ–¥–∞–≥—É–≤–∞—Ç–∏">‚úèÔ∏è</button></td>
    </tr>`;
  }
  html += '</tbody></table>';
  document.getElementById('clientsTable').innerHTML = html;
}

function renderStats(clients) {
  // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å —É —Ñ–æ—Ä–º–∞—Ç—ñ MM/YYYY
  const now = new Date();
  const currentMonth = `${String(now.getMonth() + 1).padStart(2, '0')}/${now.getFullYear()}`;
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—ñ–ª—å–∫–∏ –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å
  let orgs = {};
  
  for (const client of clients) {
    if (!orgs[client.org]) {
      orgs[client.org] = {
        currentMonthOpened: 0,
        currentMonthActivated: 0,
        currentMonthPending: 0
      };
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥–∫—Ä–∏—Ç–æ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –º—ñ—Å—è—Ü—ñ
    if (client.openDate) {
      const dateParts = client.openDate.split('/');
      if (dateParts.length === 3) {
        const accountMonth = `${dateParts[1]}/${dateParts[2]}`;
        
        if (accountMonth === currentMonth) {
          orgs[client.org].currentMonthOpened++;
          
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –≤ –ø–æ—Ç–æ—á–Ω–æ–º—É –º—ñ—Å—è—Ü—ñ
          if (client.activationDate) {
            const activationParts = client.activationDate.split('/');
            if (activationParts.length === 3) {
              const activationMonth = `${activationParts[1]}/${activationParts[2]}`;
              if (activationMonth === currentMonth) {
                orgs[client.org].currentMonthActivated++;
              }
            }
          } else {
            orgs[client.org].currentMonthPending++;
          }
        }
      }
    }
  }
  
  // –°–æ—Ä—Ç—É—î–º–æ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó –∑–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—é –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö —Ä–∞—Ö—É–Ω–∫—ñ–≤ —É –ø–æ—Ç–æ—á–Ω–æ–º—É –º—ñ—Å—è—Ü—ñ
  const sortedOrgs = Object.entries(orgs)
    .filter(([_, stats]) => stats.currentMonthOpened > 0)
    .sort((a, b) => b[1].currentMonthOpened - a[1].currentMonthOpened);
  
  // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–º–ø–∞–∫—Ç–Ω—É —Ç–∞–±–ª–∏—Ü—é –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è
  let html = `<div style="margin-bottom: 1rem;">
    <h3 style="color: #2d6a4f; margin: 0 0 0.5rem 0;">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ ${currentMonth}</h3>
    <p style="margin: 0; font-size: 0.9rem; color: #666;">
      <a href="statistics.html" style="color: #1976d2; text-decoration: none;">üìä –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ–≤–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É</a>
    </p>
  </div>`;
  
  if (sortedOrgs.length > 0) {
    html += '<table><thead><tr><th>–û—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—è</th><th>–í—ñ–¥–∫—Ä–∏—Ç–æ</th><th>–ê–∫—Ç–∏–≤–æ–≤–∞–Ω–æ</th><th>–û—á—ñ–∫—É—î</th></tr></thead><tbody>';
    
    let totalOpened = 0, totalActivated = 0, totalPending = 0;
    
    for (const [orgName, stats] of sortedOrgs) {
      html += `<tr>
        <td><strong>${orgName}</strong></td>
        <td style="background: #e8f5e8; font-weight: bold;">${stats.currentMonthOpened}</td>
        <td style="color: #4caf50; font-weight: bold;">${stats.currentMonthActivated}</td>
        <td style="color: #ff9800; font-weight: bold;">${stats.currentMonthPending}</td>
      </tr>`;
      
      totalOpened += stats.currentMonthOpened;
      totalActivated += stats.currentMonthActivated;
      totalPending += stats.currentMonthPending;
    }
    
    // –ü—ñ–¥—Å—É–º–∫–æ–≤–∏–π —Ä—è–¥–æ–∫
    html += `<tr style="border-top: 2px solid #2d6a4f; background: #f8f9fa;">
      <td><strong>–í–°–¨–û–ì–û:</strong></td>
      <td style="background: #d4edda; font-weight: bold;">${totalOpened}</td>
      <td style="color: #4caf50; font-weight: bold;">${totalActivated}</td>
      <td style="color: #ff9800; font-weight: bold;">${totalPending}</td>
    </tr>`;
    
    html += '</tbody></table>';
  } else {
    html += '<p style="text-align: center; color: #666; font-style: italic;">–£ –ø–æ—Ç–æ—á–Ω–æ–º—É –º—ñ—Å—è—Ü—ñ —Ä–∞—Ö—É–Ω–∫—ñ–≤ —â–µ –Ω–µ –≤—ñ–¥–∫—Ä–∏–≤–∞–ª–æ—Å—å</p>';
  }
  
  document.getElementById('statsTables').innerHTML = html;
}

document.getElementById('clientForm').onsubmit = async function(e) {
  e.preventDefault();
  const form = e.target;
  const newClient = {
    name: form.name.value,
    inn: form.inn.value,
    org: form.org.value,
    openDate: formatDateToDDMMYYYY(new Date()),
    activationDate: "",
    cardStatus: "–ù–∞ –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ñ",
    passport: false,
    survey: false,
    contract: false,
    comments: form.comments.value
  };
  
  // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ
  const clients = await fetchData();
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –Ω–µ–º–∞—î –∫–ª—ñ—î–Ω—Ç–∞ –∑ —Ç–∞–∫–∏–º –Ü–ü–ù
  if (clients.find(c => c.inn === newClient.inn)) {
    alert('–ö–ª—ñ—î–Ω—Ç –∑ —Ç–∞–∫–∏–º –Ü–ü–ù –≤–∂–µ —ñ—Å–Ω—É—î!');
    return;
  }
  
  // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –≤ Supabase
  const result = await SupabaseAPI.addClient(newClient);
  
  if (result.success) {
    alert('–ö–ª—ñ—î–Ω—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!');
    form.reset();
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    const allClients = await fetchData();
    currentClients = filterActiveClients(allClients);
    renderClients(currentClients);
    renderStats(currentClients);
  } else {
    // Fallback: –¥–æ–¥–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–æ —è–∫—â–æ Supabase –Ω–µ –ø—Ä–∞—Ü—é—î
    clients.push(newClient);
    await saveData(clients);
    
    alert('–ö–ª—ñ—î–Ω—Ç–∞ –¥–æ–¥–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ (–ø—Ä–æ–±–ª–µ–º–∞ –∑ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è–º –¥–æ –±–∞–∑–∏)');
    form.reset();
    
    currentClients = filterActiveClients(clients);
    renderClients(currentClients);
    renderStats(currentClients);
  }
};

// –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
let currentClients = [];
let editingIndex = -1;

// –§—É–Ω–∫—Ü—ñ—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞
async function editClient(index) {
  currentClients = await fetchData();
  const client = currentClients[index];
  editingIndex = index;
  
  // –ó–∞–ø–æ–≤–Ω—é—î–º–æ —Ñ–æ—Ä–º—É –ø–æ—Ç–æ—á–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
  document.getElementById('editName').value = client.name;
  document.getElementById('editInn').value = client.inn;
  document.getElementById('editOrg').value = client.org;
  // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –¥–∞—Ç—É –∑ DD/MM/YYYY —É YYYY-MM-DD –¥–ª—è input[type="date"]
  document.getElementById('editActivationDate').value = formatDateToYYYYMMDD(client.activationDate || '');
  document.getElementById('editCardStatus').value = client.cardStatus || '–ù–∞ –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ñ';
  document.getElementById('editPassport').checked = client.passport || false;
  document.getElementById('editSurvey').checked = client.survey || false;
  document.getElementById('editContract').checked = client.contract || false;
  document.getElementById('editComments').value = client.comments || '';
  
  // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
  document.getElementById('editModal').style.display = 'block';
}

// –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
function closeEditModal() {
  document.getElementById('editModal').style.display = 'none';
  editingIndex = -1;
}

// –û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ä–º–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
document.getElementById('editForm').onsubmit = async function(e) {
  e.preventDefault();
  
  if (editingIndex === -1) return;
  
  // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –¥–∞—Ç—É –∑ YYYY-MM-DD —É DD/MM/YYYY
  const activationDateInput = document.getElementById('editActivationDate').value;
  const activationDate = activationDateInput ? formatDateFromYYYYMMDD(activationDateInput) : '';
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞
  const updatedClient = {
    ...currentClients[editingIndex],
    name: document.getElementById('editName').value,
    inn: document.getElementById('editInn').value,
    org: document.getElementById('editOrg').value,
    activationDate: activationDate,
    cardStatus: document.getElementById('editCardStatus').value,
    passport: document.getElementById('editPassport').checked,
    survey: document.getElementById('editSurvey').checked,
    contract: document.getElementById('editContract').checked,
    comments: document.getElementById('editComments').value
  };
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –≤ Supabase
  if (updatedClient.id) {
    const result = await SupabaseAPI.updateClient(updatedClient.id, updatedClient);
    
    if (result.success) {
      alert('–î–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!');
    } else {
      alert('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö. –ó–º—ñ–Ω–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω–æ.');
    }
  }
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
  currentClients[editingIndex] = updatedClient;
  await saveData(currentClients);
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
  saveData(currentClients);
  
  // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è (—Ñ—ñ–ª—å—Ç—Ä—É—î–º–æ –∞—Ä—Ö—ñ–≤–Ω—ñ –∑–∞–ø–∏—Å–∏)
  const allClients = await fetchData();
  currentClients = filterActiveClients(allClients);
  renderClients(currentClients);
  renderStats(currentClients);
  
  // –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
  closeEditModal();
  
  alert('–î–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ!');
};

// –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –ø—Ä–∏ –∫–ª—ñ–∫—É –Ω–∞ —Ö—Ä–µ—Å—Ç–∏–∫
document.querySelector('.close').onclick = closeEditModal;

// –ó–∞–∫—Ä–∏—Ç—Ç—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –Ω–∏–º
window.onclick = function(event) {
  const modal = document.getElementById('editModal');
  if (event.target == modal) {
    closeEditModal();
  }
};

window.onload = async function() {
  const allClients = await fetchData();
  currentClients = filterActiveClients(allClients);
  renderClients(currentClients);
  renderStats(currentClients);
};
